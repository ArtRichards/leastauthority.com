Pluggable Backends
==================

.. _substrate agnostic interface: ../../src/allmydata/interfaces.py
.. _StorageServer: ../../src/allmydata/storage/server.py
.. _disk: ../../src/allmydata/storage/disk/disk_backend.py
.. _S3: ../../src/allmydata/storage/s3/s3_backend.py

The basic pattern is to provide a `substrate agnostic interface`_ to the
`StorageServer`_ by which it (the `StorageServer`_) handles queries to the
storage backend. As of this writing the extant backends are:

(1) `disk`_

(2) `S3`_

The S3 Backend
--------------

The S3 Backend has been implemented.

ShareSet Prefixes:
~~~~~~~~~~~~~~~~~~

When a ShareSet is uploaded the storage index (a XXXbit pseudo-random number)
is used as a template to generate a probabilistically "balanced" directory
structure.  The purpose of this process is to facilitate subsequent look-ups
of the resource.

Concretely the first two characters in the base32 encoded string
(StorageIndex) are used to either generate a new directory, or reference one
previously generated by this method.  Since each character contains 5 bits of
information the result is a directory structure with up to 1024 distinct
subdirectories.  The ShareSet itself is then stored under its
arbitrary-yet-deterministic subdirectory.

The effect is that ShareSets are partitioned into no more than 1024 bins, a
tractable number for subsequent lookups (at least on current-and-tested systems).

This notion of "prefix" is specific to LAFS.  It's not quite orthogonal to
the notion of an S3 prefix (S3 prefixes *contain* LAFS prefixes), but the
relationship is incidental and the two notions should be treated
independently where possible.

S3 Prefixes:
~~~~~~~~~~~~

.. _the HTTP "GET" service provided by S3: http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGET.html

The AWS S3 system specifies that HTTP queries requesting more that 1000
objects from an S3 "bucket" return only a truncated subset of the requested
data.

By default `the HTTP "GET" service provided by S3`_ returns all objects
stored within a particular bucket.  

These two facts mean that buckets containing more than 1000 objects do not
service "GET" requests with all the information that was requested.

GET requests containing a "prefix" "request parameter" (HTTP queryarg)
return only those objects whose keys begin with the "prefix" value
(evidently the S3 bucket is implemented as a key-value store).

The txaws s3.client.S3Client provides a method for transforming strings into
URL-safe queryarg key value pairs, which can then be submitted (via other
txaws methods) to S3.

get_sharesets_for_prefix
''''''''''''''''''''''''

.. _s3_backend.S3Backend.get_sharesets_for_prefix: ../../src/allmydata/storage/s3/s3_backend.py
.. _s3_bucket.S3Bucket.list_objects: ../../src/allmydata/storage/s3/s3_bucket.py

The `s3_backend.S3Backend.get_sharesets_for_prefix`_ [1]_ method calls the
`s3_bucket.S3Bucket.list_objects`_ method with a string of the form:
``shares/AB/`` passed as the second argument.  This in turn invokes txaws'
S3Client.get_bucket method with ``shares/AB/`` as a prefix argument.

The result is that only those objects in the S3 bucket with the corresponding
prefix are requested.

One might be provoked to inquire as to the maximum number of objects
(distinct-shnum shares this could request).  I believe the theoretical answer
is *unbounded*!!  Fortunately this theoretical maximum will only be
approached as each of the 1024 (possible) subdirectories is filled, so we can
expect to not request more than 1000 objects until about 1,024,000 distinct
shares have been stored in the bucket.

get_shares
''''''''''

.. _s3_backend.get_S3ShareSet.get_shares: ../../src/allmydata/storage/s3/s3_backend.py

The `s3_backend.get_S3ShareSet.get_shares`_ method also calls the
`s3_bucket.S3Bucket.list_objects`_ method with a string, but of the form
``shares/AB/ABXXX``, this prefix guarantees that at most 255 objects are
returned by the call.

Experimental Setup
------------------

To determine the effect of the prefix arguments on the behavior of TLOS3, I
believe it is sufficient to remove the ``prefix`` arguments from the calls
described above.

.. [1] The get_sharesets_for_prefix method of the S3_backend is only invoked by crawlers.

