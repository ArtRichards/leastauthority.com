    Once AWS DevPay has successfully processed an activation request it informs
  the user.  The user's browser then informs the LAE-webserver by passing it an "activation key". FOOTNOTE?--> The "activation key" is a
  one-hour-lifespan expiring token, that uniquely identifies a payment
  application.

  Upon receipt of an activation request, DevPay begins a "vetting" process to determine if the
  applicant's payment credentials are valid. If
  the   The webserver passes the
  necessary information to an automation server, which provides a "signup" service.

    To limit the scope of server failure we will run the automation server
  on a separate EC2 instance.  A flappserver client/server pair is
  used for communication between the machines. 

*Flappserver: "The Foolscap Application Server": http://foolscap.lothar.com/docs/flappserver.html

    The flappserver runs on the "automation" EC2 server instance. It provides the
  signup service, used by the corresponding flappclient which runs on the webserver.
  The client knows about this service because it knows the service's furl; it does
  not have any other credentials to log in to the automation instance.

    The flappserver has been configured to run the signup service with the following
  invocation::

    flappserver add BASEDIR run-command --accept-stdin --send-stdout PWD PWD/full_signup.sh

    This invocation generates a furl that references the service, which is stored in
  the file signup.furl (in the same directory as the web server's JSON config file).
  Once the client is set up it uses the furl to pass messages to the server.

    When it receives an activation request, the web server does the programmatic
  equivalent of invoking flappclient like this::

    flappclient -f <path to signup.furl> run-command

  with the command's stdin giving the fields from the signup request form. These
  fields are transmitted in the following format:

    ACTIVATION_KEY\nPRODUCT_CODE\nNAME\nEMAIL\nPUBLIC_KEY_OR_FINGERPRINT\n

    The PRODUCT_CODE will be combined with a RANDOMSTRING to make the
  BUCKET_NAME as follows::

    RANDOMSTRING = base64.b32encode(os.urandom(20)).rstrip('=').lower()
    BUCKET_NAME = lae-PRODUCTCODE-RANDOMSTRING

  This information will eventually go into a database on the automation server;
  for now it will be logged to a file [more details needed].

  The service registered on the flappserver has its core functionality in "full_signup.py".

  full_signup.py is a pipeline that runs several modular tasks sequentially.

  These are:

  (1) Activate an AWS DevPay "desktop product":
      * This associates the customer's payment credentials with a
  particular product.
      -- Receives:
          1. Activation Key, a short lived token associated with the
             customer's payment credential.
          2. Product Token, a long secret that uniquely references the DevPay
             product the customer has selected.

      -- Returns: 
          1. Access Key ID
          2. Secret Access key
          3. A User Token, that is specific to the customer-product-payment credentials.

  (2) Verify the access key and user token:
      * This checks that the customer's payment credentials have satisfied DevPay's
  legitimacy criteria.  We only proceed further upon success.
      -- Receives:
          1. Access Key ID
          2. Secret Access Key
          3. User Token
          4. Product Token.

  (3) Create DevPay S3 bucket associated with the credentials from the previous step.
  (4) Create EC2 Server
  (5) Apply software updates to EC2 Server and reboot
  (6) Build and configure tahoe storage server and introducer on EC2
  (7) Notify (optionally with encryption) customer via email of introducer furl.


