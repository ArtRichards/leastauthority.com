* "inclusion criteria":  Standards describing the properties of code included
  in a given repository

A list of repositories:

  * "production":  This repository contains the currently running code:
  (e.g. leastauthority.com:/home/website)
  * "staging":     This repository contains tested code, awaiting review prior
  to inclusion in "production". This code is believed "production ready" by
  at least one developer.
  * "developing":  These repositories contain code under active
  development. (e.g. /home/zancas/source...)
  * "local":       These repositories are typically not visible to the
  community.  They frequently dwell on local machines, and have no inclusion criteria.


Inclusion Criteria By Repository:

  production:
    All unit and system tests pass.  Multi-developer review.

  staging:
    New Unit tests pass.

  developing:
    Old Unit tests pass. (I.E. no obvious regression.)

  local:
    None.



* Patches whose names begin with "NSR", are "Not Staging Ready".  NSR patches
are to be re-recorded prior to inclusion in staging repositories
(/var/source...).

* Typical Code Flow:

    (1) pull from staging to local repo
    (2) develop
    (3) ensure changes, pass _at least_ previously extant unit tests
    (4) push from local to developing
    (5) update local until: new tests, and system tests, and extant tests pass.
         * This is an iterative process that may involve pulling from
    developing.
         * In this process NSR changes may be incorporated into developing.
         * During this stage other developers may pull from and push to
    developing.
    (6) ensure patches in developing are staging-ready.
    (7) push staging-ready patch set from developing to staging.
    (8) inform other developers of a change to staging.

What is sufficient unit testing for inclusion into staging:

  For each funtion that is modified by a patch-set, there are tests ensure that:

    (1) all invocations of the function receive the correct number of
    arguments.
    (2) all callers receive the correct number of return objects
    (3) TestCase equality tests check that the types of passed objects are
    correct
    (4) TestCase equality tests check that the types of returned objects are correct.
